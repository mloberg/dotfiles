#!/usr/bin/env bash
#
# Run all dotfiles installers.
set -e

overwrite_all=false
backup_all=false
skip_all=false

## START: functions ##
info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]; then
    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]; then
      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]; then
        skip=true;
      else
        user "File already exists: $(basename "$src"), what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi
    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]; then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]; then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]; then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]; then  # "false" or empty
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

## END: functions ##

DOTFILES_ROOT="$(cd "$(dirname "$0")/.." && pwd)"

# Make sure we're in the dotfiles root
cd "${DOTFILES_ROOT}"

# Create gitconfig file if one doesn't exist
if [ ! -f git/gitconfig.symlink ]; then
  info 'Generating git config'

  case $OSTYPE in
    darwin*)
      git_credential='osxkeychain'
      ;;
    *)
      git_credential='cache'
      ;;
  esac

  user 'What is your GitHub author name?'
  read -e git_authorname
  user 'What is your GitHub author email?'
  read -e git_authoremail

  (sed "s|{{AUTHORNAME}}|$git_authorname|;s|{{AUTHOREMAIL}}|$git_authoremail|;s|{{GIT_CREDENTIAL_HELPER}}|$git_credential|" "git/gitconfig.symlink.example") > git/gitconfig.symlink

  success 'Generated git config'
fi

# Symlink dotfiles
info "Symlinking dotfiles"

for src in $(find "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink'); do
  dst="$HOME/.$(basename "${src%.*}")"
  link_file "$src" "$dst"
done

# OS specific dotfiles
for src in $(find "$DOTFILES_ROOT/os/$(uname -s | awk '{print tolower($0)}')" -name '*.symlink'); do
  dst="$HOME/.$(basename "${src%.*}")"
  link_file "$src" "$dst"
done

success "Symlinked dotfiles"

# Search for installers and run them
for installer in $(find . -maxdepth 2 -name "install.sh"); do
    source "${installer}"
done
