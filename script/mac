#!/usr/bin/env bash
#
# Setup a fresh Mac
set -ue

info() {
  printf "🛠 \033[00;36m%s\033[0m\n" "$1"
}

success() {
  printf "🙌 \033[00;32m%s\033[0m\n" "$1"
}

warn() {
  printf "⚠️ \033[00;33m%s\033[0m\n" "$1"
}

user() {
  printf "⁉️ \033[0;33m%s\033[0m" "$1"
}

abort() {
  printf "💀 \033[0;31m%s\033[0m\n" "$1"
  exit 1
}

[ "$(uname -s)" != "Darwin" ] && abort "This only works on MacOS"

user "Hostname: "
read -r hostname

if [ -n "$hostname" ]; then
  info "Setting hostname..."
  sudo hostname "$hostname"
  sudo scutil --set ComputerName "$hostname"
  sudo scutil --set HostName "$hostname"
  sudo scutil --set LocalHostName "$hostname"
  sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "$hostname"
fi

if ! command -v brew >/dev/null; then
  info "Installing Homebrew"
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

[ -f /opt/homebrew/bin/brew ] && eval "$(/opt/homebrew/bin/brew shellenv)"
brew doctor &>/dev/null || abort "\"brew doctor\" is reporting issues. Please fix then run again."

if [ "$(uname -m)" == "arm64" ]; then
  user "Install Rosetta 2? [y/N] "
  read -r rosetta
  if [[ "${rosetta}" =~ ^(y|Y) ]]; then
    softwareupdate --install-rosetta
  fi
fi

info "Installing some requirements via Homebrew"
brew bundle --file=- <<EOF
tap "thoughtbot/formulae"
brew "rcm"
EOF

info "Installing dotfiles"
[ ! -d "$HOME/.dotfiles" ] && git clone https://github.com/mloberg/dotfiles.git ~/.dotfiles
RCRC="$HOME/.dotfiles/rcrc" rcup

user "Clear Dock? [y/N] "
read -r clear
if [[ "${clear}" =~ ^(y|Y) ]]; then
  info "Clearing the Dock"
  m dock prune
fi

if [ ! -f "$HOME/.firefox/prefs.js" ]; then
  info "Setting up Firefox profile"
  /Applications/Firefox.app/Contents/MacOS/firefox -CreateProfile "mloberg $HOME/.firefox"
  /Applications/Firefox.app/Contents/MacOS/firefox -ProfileManager
fi

info "Updating software"
sudo softwareupdate -i -a

info "Setting MacOS configuration"
~/.dotfiles/bin/macos

if ! fdesetup status | grep --quiet On; then
  info "Enable FileVault"
  if ! diskutil info / | grep 'File System Personality:' | grep -q 'APFS'; then
    warn "Filesystem is not APFS. Not enabling FDE."
  else
    sudo fdesetup enable -user "$USER" | tee "$HOME/FileVault_recovery_key.txt"
  fi
fi

if [ -f ~/Library/Google/GoogleSoftwareUpdate/GoogleSoftwareUpdate.bundle/Contents/Resources/ksinstall ]; then
 ~/Library/Google/GoogleSoftwareUpdate/GoogleSoftwareUpdate.bundle/Contents/Resources/ksinstall --nuke
fi

groups | grep -qv 'admin' || warn "${USER} should not be an administrator"

success "Success"

user "Restart now? [Y/n] "
read -r reboot
if [[ "${reboot}" =~ ^(y|Y) ]] || [[ "$reboot" == "" ]]; then
  warn "Restart"
  m restart
fi
