#!/usr/bin/env bash
#
# Setup a fresh Mac
set -ue

info() {
  printf "🛠 \033[00;36m%s\033[0m\n" "$1"
}

success() {
  printf "🙌 \033[00;32m%s\033[0m\n" "$1"
}

warn() {
  printf "⚠️ \033[00;33m%s\033[0m\n" "$1"
}

user() {
  printf "⁉️ \033[0;33m%s\033[0m" "$1"
}

abort() {
  printf "☠️ \033[0;31m%s\033[0m\n" "$1"
  exit 1
}

[ "$(uname -s)" != "Darwin" ] && abort "This only works on MacOS"
[ ! -r "$HOME/Library/Mail" ] && abort "Need full disk access"

user "Hostname: "
read -r hostname

if [ -n "$hostname" ]; then
  info "Setting hostname..."
  sudo hostname "$hostname"
  sudo scutil --set ComputerName "$hostname"
  sudo scutil --set HostName "$hostname"
  sudo scutil --set LocalHostName "$hostname"
  sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "$hostname"
fi

if ! command -v brew >/dev/null; then
  info "Installing Homebrew"
  /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

brew doctor &>/dev/null || abort "\"brew doctor\" is reporting issues. Please fix then run again."

info "Installing some requirements via Homebrew"
brew bundle --file=- <<EOF
tap "thoughtbot/formulae"
brew "rcm"
EOF

info "Installing dotfiles"
[ ! -d "$HOME/.dotfiles" ] && git clone https://github.com/mloberg/dotfiles.git ~/.dotfiles
RCRC="$HOME/.dotfiles/rcrc" rcup

info "Set default shell to zsh"
grep --quiet "$(command -v zsh)" /etc/shells || (command -v zsh | sudo tee -a /etc/shells)
[ "$(command -v zsh)" == $SHELL ] || chsh -s "$(command -v zsh)"

info "Configuring Vagrant to not require passwords"
if [ ! -f /etc/sudoers.d/vagrant ]; then
  cat <<EOF | sudo tee /etc/sudoers.d/vagrant
Cmnd_Alias VAGRANT_EXPORTS_ADD = /usr/bin/tee -a /etc/exports
Cmnd_Alias VAGRANT_NFSD = /sbin/nfsd restart
Cmnd_Alias VAGRANT_EXPORTS_REMOVE = $(command -v sed) -E -e /*/ d -ibak /etc/exports
Cmnd_Alias VAGRANT_HOSTS_ADD = /bin/sh -c echo "*" >> /etc/hosts
Cmnd_Alias VAGRANT_HOSTS_REMOVE = $(command -v sed) -i -e /*/ d /etc/hosts
%admin ALL=(root) NOPASSWD: VAGRANT_EXPORTS_ADD, VAGRANT_NFSD, VAGRANT_EXPORTS_REMOVE, VAGRANT_HOSTS_ADD, VAGRANT_HOSTS_REMOVE
EOF
fi

user "Clear Dock? [y/N] "
read -r clear
if [[ "${clear}" =~ ^(y|Y)$ ]]; then
  info "Clearing the Dock"
  m dock prune
fi

info "Updating software"
sudo softwareupdate -i -a

info "Setting MacOS configuration"
~/.macos

if [ ! -L /usr/local/etc/dnscrypt-proxy.toml ]; then
  info "Setting up DNSCrypt"
  rm -f /usr/local/etc/dnscrypt-proxy.toml
  ln -s "$HOME/.dotfiles/config/dnscrypt-proxy.toml" /usr/local/etc/dnscrypt-proxy.toml
  sudo brew services restart dnscrypt-proxy
fi

if [ ! -L /usr/local/etc/dnsmasq.conf ]; then
  info "Setting up Dnsmasq"
  rm -f /usr/local/etc/dnsmasq.conf
  ln -s "$HOME/.dotfiles/config/dnsmasq.conf" /usr/local/etc/dnsmasq.conf
  sudo brew services restart dnsmasq
  sudo networksetup -setdnsservers "Wi-Fi" 127.0.0.1
  warn "Unable to set the DNS servers on non Wi-Fi connections"
  warn "Please do so manually with 127.0.0.1"
  dig +dnssec icann.org | grep "status: NOERROR" >/dev/null || warn "Error in Dnsmasq configuration!"
fi

if [ ! -L /usr/local/etc/privoxy/config ]; then
  info "Setup Privoxy"
  rm -f /usr/local/etc/privoxy/config
  rm -f /usr/local/etc/privoxy/user.action
  ln -s "$HOME/.dotfiles/config/privoxy/config" /usr/local/etc/privoxy/config
  ln -s "$HOME/.dotfiles/config/privoxy/user.action" /usr/local/etc/privoxy/user.action
  brew services restart privoxy
  sudo networksetup -setwebproxy "Wi-Fi" 127.0.0.1 8118
  sudo networksetup -setsecurewebproxy "Wi-Fi" 127.0.0.1 8118
  warn "Unable to set proxy settings on non Wi-Fi connections"
  warn "Please do so manually with 127.0.0.1:8118"
fi

if ! grep --quiet "StevenBlack/hosts" /etc/hosts; then
 info "Adding known bad hosts to /etc/hosts"
 curl -s https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts | sudo tee -a /etc/hosts >/dev/null
fi

if ! fdesetup status | grep --quiet On; then
  info "Enable FileVault"
  if ! diskutil info / | grep 'File System Personality:' | grep -q 'APFS'; then
    warn "Filesystem is not APFS. Not enabling FDE."
  else
    sudo fdesetup enable -user "$USER" | tee "$HOME/FileVault_recovery_key.txt"
  fi
fi

if ! sudo firmwarepasswd -check | grep --quiet Yes; then
 user "Set Firmware Password? [y/N] "
 read -r permission
 [[ "${permission}" =~ ^(y|Y)$ ]] && sudo firmwarepasswd -setpasswd
fi

spctl kext-consent status | grep -q 'ENABLED' || warn "Kernel Extension User Consent not required"

if system_profiler SPiBridgeDataType | grep 'Model Name:' | grep -q 'T2'; then
 warn "EFI Firmware Integrity Check Not Supported by this Mac"
else
 /usr/libexec/firmwarecheckers/eficheck/eficheck --integrity-check >/dev/null 2>&1 || warn "EFI Firmware Integrity Check Failed"
fi

if [ -f ~/Library/Google/GoogleSoftwareUpdate/GoogleSoftwareUpdate.bundle/Contents/Resources/ksinstall ]; then
 ~/Library/Google/GoogleSoftwareUpdate/GoogleSoftwareUpdate.bundle/Contents/Resources/ksinstall --nuke
fi

groups | grep -qv 'admin' || warn "${USER} should not be an administrator"

success "Success"
warn "Firefox setup not complete. See ~/.dotfiles/firefox/setup.md"
warn "Rebooting in 5s"
sleep 5
m restart
