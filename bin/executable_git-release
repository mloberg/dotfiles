#!/usr/bin/env bash
# Create and push a git tag
#
# If argument starts with a "v" or number, it will use that as the version
# Otherwise it will generate a semver
#
# Usage:
#       git release 1.0.0 -- -m "foo" -s
#       git release v1.1.0
#       git release patch
#       git release patch --pre beta
#       git release --pre beta2
#       git release patch --dry-run
#       git release minor --no-push

fail() {
    echo "$1" 1>&2
    exit "${2:-1}"
}

_usage() {
    c=$(basename "$0")
    cat <<EOF >&2
Publish a new git tag based on the previous tag.

Usage:
    $c [version|major|minor|patch] [flags] [ -- <git tag arguments>]

Flags:
    --pre string      Create a prerelease
    --beta            Same as "--pre beta"
    --dry-run         Don't create or push tag
    --no-push         Don't push the created tag
    --release         Create a release on GitHub with gh cli

Examples:
    Create a new patch release (x.x.Y):
        $c patch

    Create a new pre-release (x.x.x-beta2):
        $c --pre beta2

    Create a specific version (must start with v):
        $c v1.2.3
EOF
    exit "${1:-0}"
}

while test $# != 0; do
    case "$1" in
        --help|-h) _usage ;;
        --pre|-p) prerelease="$2"; shift ;;
        --beta) prerelease="beta"; ;;
        --release) release="1" ;;
        --no-push) nopush="1"; ;;
        --dry-run) notag="1"; nopush="1"; ;;
        --) shift; args="$*"; break ;;
        *) test -z "$version" && version=$1 ;;
    esac

    shift
done

if [[ ! "$version" =~ ^[v0-9] ]]; then
    latest=$(git describe --tags "$(git rev-list --tags --max-count=1)")

    if [[ ! "$latest" =~ ^([^0-9]*)([1-9][0-9]+|[0-9])\.([1-9][0-9]+|[0-9])\.([1-9][0-9]+|[0-9])(.*) ]]; then
      fail "the latest tag doesn't match semver format requirement"
    fi

    prefix="${BASH_REMATCH[1]}"
    major="${BASH_REMATCH[2]}"
    minor="${BASH_REMATCH[3]}"
    patch="${BASH_REMATCH[4]}"

    case "$version" in
        major) version="$((major + 1)).0.0" ;;
        minor) version="${major}.$((minor + 1)).0" ;;
        patch) version="${major}.${minor}.$((patch + 1))" ;;
        *) version="${major}.${minor}.${patch}" ;;
    esac

    [ -n "$prerelease" ] && version="${version}-${prerelease}"
    [ -n "$prefix" ] && version="${prefix}${version}"

    if [ "$latest" == "$version" ]; then
        _usage 1
    fi
fi

echo "Creating tag ${version}"

# shellcheck disable=SC2086
[ -n "$notag" ] || git tag "$version" -a -m "$version" $args
[ -n "$nopush" ] || git push --tags
[ -z "$release" ] || gh release create "$version" --generate-notes
